-- Table to Store CVE Files
CREATE TABLE cve_files (
    cve_id TEXT PRIMARY KEY,
    hash TEXT,
    data JSONB
);

-- View to Flatten CVE Data
CREATE VIEW cve_flat_view AS
SELECT
    cve_id,
    (data->'cveMetadata'->>'assignerOrgId') AS assigner_org_id,
    (data->'cveMetadata'->>'assignerShortName') AS assigner_short_name,
    (data->'cveMetadata'->>'requesterUserId') AS requester_user_id,
    (data->'cveMetadata'->>'serial')::INTEGER AS serial,
    (data->'cveMetadata'->>'state') AS state,
    (data->'cveMetadata'->>'dateReserved')::TIMESTAMP AS date_reserved,
    (data->'cveMetadata'->>'datePublished')::TIMESTAMP AS date_published,
    (data->'containers'->'cna'->'providerMetadata'->>'orgId') AS providerMetadata_org_id,
    (data->'containers'->'cna'->'providerMetadata'->>'shortName') AS providerMetadata_short_name,
    (data->'containers'->'cna'->'providerMetadata'->>'dateUpdated')::TIMESTAMP AS providerMetadata_date_updated,
    (data->'containers'->'cna'->>'title') AS title,
    (data->'containers'->'cna'->>'datePublic')::TIMESTAMP AS date_public,
    (data->'containers'->'cna'->>'dateAssigned')::TIMESTAMP AS date_assigned,
    (data->'containers'->'cna'->'problemTypes'->0->'descriptions'->0->>'lang') AS problem_type_lang,
    (data->'containers'->'cna'->'problemTypes'->0->'descriptions'->0->>'cweId') AS problem_type_cwe_id,
    (data->'containers'->'cna'->'problemTypes'->0->'descriptions'->0->>'description') AS problem_type_description,
    (data->'containers'->'cna'->'problemTypes'->0->'descriptions'->0->>'type') AS problem_type_type,
    (data->'containers'->'cna'->'impacts'->0->>'capecId') AS impact_capec_id,
    (data->'containers'->'cna'->'impacts'->0->'descriptions'->0->>'lang') AS impact_lang,
    (data->'containers'->'cna'->'impacts'->0->'descriptions'->0->>'value') AS impact_value,
    (data->'containers'->'cna'->'affected'->0->>'vendor') AS affected_vendor,
    (data->'containers'->'cna'->'affected'->0->>'product') AS affected_product,
    (data->'containers'->'cna'->'affected'->0->>'platforms') AS affected_platforms,
    (data->'containers'->'cna'->'affected'->0->>'collectionURL') AS affected_collection_url,
    (data->'containers'->'cna'->'affected'->0->>'packageName') AS affected_package_name,
    (data->'containers'->'cna'->'affected'->0->>'repo') AS affected_repo,
    (data->'containers'->'cna'->'affected'->0->>'modules') AS affected_modules,
    (data->'containers'->'cna'->'affected'->0->>'programFiles') AS affected_program_files,
    ARRAY(SELECT jsonb_array_elements_text((data->'containers'->'cna'->'affected'->0->>'programRoutines')::jsonb)) AS affected_program_routines,
    ARRAY(SELECT jsonb_array_elements_text((data->'containers'->'cna'->'affected'->0->>'changes')::jsonb)) AS affected_changes,
    (data->'containers'->'cna'->'affected'->0->>'versions') AS affected_versions,
    (data->'containers'->'cna'->'affected'->0->>'defaultStatus') AS affected_default_status,
    (data->'containers'->'cna'->'affected'->0->>'cpes') AS affected_cpes,
    (data->'containers'->'cna'->'descriptions'->0->>'lang') AS description_lang,
    (data->'containers'->'cna'->'descriptions'->0->>'value') AS description_value,
    (data->'containers'->'cna'->'descriptions'->0->>'supportingMedia') AS description_supporting_media,
    (data->'containers'->'cna'->'metrics'->0->>'format') AS metrics_format,
    (data->'containers'->'cna'->'metrics'->0->>'scenarios') AS metrics_scenarios,
    (data->'containers'->'cna'->'metrics'->0->>'cvssV4_0') AS metrics_cvssv4_0,
    (data->'containers'->'cna'->'metrics'->0->>'cvssV3_1') AS metrics_cvssv3_1,
    (data->'containers'->'cna'->'metrics'->0->>'cvssV3_0') AS metrics_cvssv3_0,
    (data->'containers'->'cna'->'metrics'->0->>'cvssV2_0') AS metrics_cvssv2_0,
    (data->'containers'->'cna'->'solutions'->0->>'lang') AS solutions_lang,
    (data->'containers'->'cna'->'solutions'->0->>'value') AS solutions_value,
    (data->'containers'->'cna'->'solutions'->0->>'supportingMedia') AS solutions_supporting_media,
    (data->'containers'->'cna'->'workarounds'->0->>'lang') AS workarounds_lang,
    (data->'containers'->'cna'->'workarounds'->0->>'value') AS workarounds_value,
    (data->'containers'->'cna'->'workarounds'->0->>'supportingMedia') AS workarounds_supporting_media,
    (data->'containers'->'cna'->'configurations'->0->>'lang') AS configurations_lang,
    (data->'containers'->'cna'->'configurations'->0->>'value') AS configurations_value,
    (data->'containers'->'cna'->'configurations'->0->>'supportingMedia') AS configurations_supporting_media,
    (data->'containers'->'cna'->'exploits'->0->>'lang') AS exploits_lang,
    (data->'containers'->'cna'->'exploits'->0->>'value') AS exploits_value,
    (data->'containers'->'cna'->'exploits'->0->>'supportingMedia') AS exploits_supporting_media,
    (data->'containers'->'cna'->>'timeline') AS timeline,
    (data->'containers'->'cna'->>'credits') AS credits,
    (data->'containers'->'cna'->>'references') AS references,
    (data->'containers'->'cna'->'source'->>'defects') AS source_defects,
    (data->'containers'->'cna'->'source'->>'advisory') AS source_advisory,
    (data->'containers'->'cna'->'source'->>'discovery') AS source_discovery,
    (data->'containers'->'cna'->'source'->>'other') AS source_other,
    (data->'containers'->'cna'->>'taxonomyMappings') AS taxonomy_mappings,
    (data->'containers'->'cna'->'taxonomyMappings'->0->>'taxonomyName') AS taxonomy_name,
    (data->'containers'->'cna'->'taxonomyMappings'->0->>'taxonomyVersion') AS taxonomy_version,
    ARRAY(SELECT jsonb_array_elements_text((data->'containers'->'cna'->'taxonomyMappings'->0->>'taxonomyRelations')::jsonb)) AS taxonomy_relations,
    (data->>'dataType') AS data_type,
    (data->>'dataVersion') AS data_version,
    (data->>'tags') AS tags
FROM cve_files;

-- Table to Store Hashes
CREATE TABLE file_hashes (
    cve_id TEXT PRIMARY KEY,
    hash TEXT
);
