from fastapi import FastAPI, HTTPException, Depends, Security
from fastapi.security import APIKeyHeader
import asyncpg
import logging

app = FastAPI()

# Database connection configuration
DATABASE_CONFIG = {
    'user': '<DB_USER>',
    'password': '<DB_PASSWORD>',
    'database': '<DB_NAME>',
    'host': '<DB_HOST>',
    'port': '<DB_PORT>'
}

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Define the API key header
API_KEY_NAME = "X-API-Key"
api_key_header = APIKeyHeader(name=API_KEY_NAME, auto_error=False)

# Define the valid API key
VALID_API_KEY = "<VALID_API_KEY>"

async def get_db_connection():
    try:
        connection = await asyncpg.connect(**DATABASE_CONFIG)
        return connection
    except Exception as e:
        logger.error(f"Database connection error: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Database connection error: {str(e)}")

async def get_api_key(api_key_header: str = Security(api_key_header)):
    if api_key_header == VALID_API_KEY:
        return api_key_header
    else:
        raise HTTPException(status_code=403, detail="Invalid API Key")

@app.get("/cve/{cve_id}")
async def get_cve_details(cve_id: str, api_key: str = Depends(get_api_key)):
    try:
        connection = await get_db_connection()
        query = "SELECT data FROM cve_files WHERE cve_id = $1"
        result = await connection.fetchrow(query, cve_id)
        await connection.close()

        if result:
            return result['data']
        else:
            raise HTTPException(status_code=404, detail="CVE not found")
    except asyncpg.exceptions.UndefinedTableError:
        logger.error("Table not found")
        raise HTTPException(status_code=500, detail="Table not found")
    except asyncpg.exceptions.PostgresError as e:
        logger.error(f"Database error: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")
    except Exception as e:
        logger.error(f"Error fetching CVE details: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Error fetching CVE details: {str(e)}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
